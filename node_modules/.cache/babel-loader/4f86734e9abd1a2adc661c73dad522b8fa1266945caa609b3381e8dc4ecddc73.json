{"ast":null,"code":"import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport Section from \"./components/Section/Section\";\nimport Notification from \"./components/Notification/Notification\";\nimport Statistics from \"./components/Statistics/Statistics\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nconst App = () => {\n  // state = {\n  //   good: 0,\n  //   neutral: 0,\n  //   bad: 0,\n  //   total: 0,\n  //   positivePercentage: 0,\n  // };\n\n  const [good, setGood] = setState(0);\n  const [neutral, setNeutral] = setState(0);\n  const [bad, setBad] = setState(0);\n  const [total, setTotal] = setState(0);\n  const [positivePercentage, setPositivePercentage] = setState(0);\n  addFeedback = evt => {\n    const objKey = evt.target.textContent.toLowerCase();\n    // this.setState((prevState) => {\n    //   return {\n    //     [objKey]: prevState[objKey] + 1,\n    //   };\n    // });\n  };\n  countTotalFeedback = () => {\n    // this.setState((prevState) => ({\n    //   total: prevState.total + 1,\n    // }));\n    setTotal(prevTotal => prevTotal + 1);\n  };\n  countPositiveFeedbackPercentage = () => {\n    this.setState(prevState => ({\n      positivePercentage: Math.round(prevState.good / prevState.total * 100)\n    }));\n    setPositivePercentage(prevPositivePercentage => pos);\n  };\n\n  // render() {\n  //   const { good, neutral, bad, total, positivePercentage } = this.state;\n  //   return (\n  //     <>\n  //       <Section title={\"Please leave feedback\"}>\n  //         <FeedbackOptions\n  //           options={[\"Good\", \"Neutral\", \"Bad\"]}\n  //           onLeaveFeedback={(evt) => {\n  //             this.addFeedback(evt);\n  //             this.countTotalFeedback();\n  //             this.countPositiveFeedbackPercentage();\n  //           }}\n  //         />\n  //       </Section>\n\n  //       <Section title={\"Statistics\"}>\n  //         {total === 0 ? (\n  //           <Notification />\n  //         ) : (\n  //           <Statistics\n  //             good={good}\n  //             neutral={neutral}\n  //             bad={bad}\n  //             total={total}\n  //             positivePercentage={positivePercentage}\n  //           />\n  //         )}\n  //       </Section>\n  //     </>\n  //   );\n  // }\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","Section","Notification","Statistics","FeedbackOptions","App","good","setGood","setState","neutral","setNeutral","bad","setBad","total","setTotal","positivePercentage","setPositivePercentage","addFeedback","evt","objKey","target","textContent","toLowerCase","countTotalFeedback","prevTotal","countPositiveFeedbackPercentage","prevState","Math","round","prevPositivePercentage","pos","_c","$RefreshReg$"],"sources":["/Users/senya/Desktop/react-feedbacks-hooks-hw/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport Section from \"./components/Section/Section\";\nimport Notification from \"./components/Notification/Notification\";\nimport Statistics from \"./components/Statistics/Statistics\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\n\nconst App = () => {\n  // state = {\n  //   good: 0,\n  //   neutral: 0,\n  //   bad: 0,\n  //   total: 0,\n  //   positivePercentage: 0,\n  // };\n\n  const [good, setGood] = setState(0);\n  const [neutral, setNeutral] = setState(0);\n  const [bad, setBad] = setState(0);\n  const [total, setTotal] = setState(0);\n  const [positivePercentage, setPositivePercentage] = setState(0);\n\n  addFeedback = (evt) => {\n    const objKey = evt.target.textContent.toLowerCase();\n    // this.setState((prevState) => {\n    //   return {\n    //     [objKey]: prevState[objKey] + 1,\n    //   };\n    // });\n  };\n\n  countTotalFeedback = () => {\n    // this.setState((prevState) => ({\n    //   total: prevState.total + 1,\n    // }));\n    setTotal((prevTotal) => prevTotal + 1);\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    this.setState((prevState) => ({\n      positivePercentage: Math.round((prevState.good / prevState.total) * 100),\n    }));\n    setPositivePercentage((prevPositivePercentage) => pos)\n  };\n\n  // render() {\n  //   const { good, neutral, bad, total, positivePercentage } = this.state;\n  //   return (\n  //     <>\n  //       <Section title={\"Please leave feedback\"}>\n  //         <FeedbackOptions\n  //           options={[\"Good\", \"Neutral\", \"Bad\"]}\n  //           onLeaveFeedback={(evt) => {\n  //             this.addFeedback(evt);\n  //             this.countTotalFeedback();\n  //             this.countPositiveFeedbackPercentage();\n  //           }}\n  //         />\n  //       </Section>\n\n  //       <Section title={\"Statistics\"}>\n  //         {total === 0 ? (\n  //           <Notification />\n  //         ) : (\n  //           <Statistics\n  //             good={good}\n  //             neutral={neutral}\n  //             bad={bad}\n  //             total={total}\n  //             positivePercentage={positivePercentage}\n  //           />\n  //         )}\n  //       </Section>\n  //     </>\n  //   );\n  // }\n};\n\nexport default App;\n"],"mappings":"AAAA,OAAO,WAAW;AAClB,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,OAAO,MAAM,8BAA8B;AAClD,OAAOC,YAAY,MAAM,wCAAwC;AACjE,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,eAAe,MAAM,8CAA8C;AAE1E,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAChB;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGC,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGF,QAAQ,CAAC,CAAC,CAAC;EACzC,MAAM,CAACG,GAAG,EAAEC,MAAM,CAAC,GAAGJ,QAAQ,CAAC,CAAC,CAAC;EACjC,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACO,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAE/DS,WAAW,GAAIC,GAAG,IAAK;IACrB,MAAMC,MAAM,GAAGD,GAAG,CAACE,MAAM,CAACC,WAAW,CAACC,WAAW,CAAC,CAAC;IACnD;IACA;IACA;IACA;IACA;EACF,CAAC;EAEDC,kBAAkB,GAAGA,CAAA,KAAM;IACzB;IACA;IACA;IACAT,QAAQ,CAAEU,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;EACxC,CAAC;EAEDC,+BAA+B,GAAGA,CAAA,KAAM;IACtC,IAAI,CAACjB,QAAQ,CAAEkB,SAAS,KAAM;MAC5BX,kBAAkB,EAAEY,IAAI,CAACC,KAAK,CAAEF,SAAS,CAACpB,IAAI,GAAGoB,SAAS,CAACb,KAAK,GAAI,GAAG;IACzE,CAAC,CAAC,CAAC;IACHG,qBAAqB,CAAEa,sBAAsB,IAAKC,GAAG,CAAC;EACxD,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC;AAACC,EAAA,GArEI1B,GAAG;AAuET,eAAeA,GAAG;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}