{"ast":null,"code":"import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport Section from \"./components/Section/Section\";\nimport Notification from \"./components/Notification/Notification\";\nimport Statistics from \"./components/Statistics/Statistics\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nconst App = () => {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n    total: 0,\n    positivePercentage: 0\n  };\n  const [good, setGood] = setState(0);\n  addFeedback = evt => {\n    const objKey = evt.target.textContent.toLowerCase();\n    this.setState(prevState => {\n      return {\n        [objKey]: prevState[objKey] + 1\n      };\n    });\n  };\n  countTotalFeedback = () => {\n    this.setState(prevState => ({\n      total: prevState.total + 1\n    }));\n  };\n  countPositiveFeedbackPercentage = () => {\n    this.setState(prevState => ({\n      positivePercentage: Math.round(prevState.good / prevState.total * 100)\n    }));\n  };\n\n  // render() {\n  //   const { good, neutral, bad, total, positivePercentage } = this.state;\n  //   return (\n  //     <>\n  //       <Section title={\"Please leave feedback\"}>\n  //         <FeedbackOptions\n  //           options={[\"Good\", \"Neutral\", \"Bad\"]}\n  //           onLeaveFeedback={(evt) => {\n  //             this.addFeedback(evt);\n  //             this.countTotalFeedback();\n  //             this.countPositiveFeedbackPercentage();\n  //           }}\n  //         />\n  //       </Section>\n\n  //       <Section title={\"Statistics\"}>\n  //         {total === 0 ? (\n  //           <Notification />\n  //         ) : (\n  //           <Statistics\n  //             good={good}\n  //             neutral={neutral}\n  //             bad={bad}\n  //             total={total}\n  //             positivePercentage={positivePercentage}\n  //           />\n  //         )}\n  //       </Section>\n  //     </>\n  //   );\n  // }\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","Section","Notification","Statistics","FeedbackOptions","App","state","good","neutral","bad","total","positivePercentage","setGood","setState","addFeedback","evt","objKey","target","textContent","toLowerCase","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","_c","$RefreshReg$"],"sources":["/Users/senya/Desktop/react-feedbacks-hooks-hw/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport { useState,useEffect } from \"react\";\nimport Section from \"./components/Section/Section\";\nimport Notification from \"./components/Notification/Notification\";\nimport Statistics from \"./components/Statistics/Statistics\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\n\nconst App = () => {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n    total: 0,\n    positivePercentage: 0,\n  };\n\n  const [good, setGood] = setState(0);\n\n  addFeedback = (evt) => {\n    const objKey = evt.target.textContent.toLowerCase();\n    this.setState((prevState) => {\n      return {\n        [objKey]: prevState[objKey] + 1,\n      };\n    });\n  };\n\n  countTotalFeedback = () => {\n    this.setState((prevState) => ({\n      total: prevState.total + 1,\n    }));\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    this.setState((prevState) => ({\n      positivePercentage: Math.round((prevState.good / prevState.total) * 100),\n    }));\n  };\n\n  // render() {\n  //   const { good, neutral, bad, total, positivePercentage } = this.state;\n  //   return (\n  //     <>\n  //       <Section title={\"Please leave feedback\"}>\n  //         <FeedbackOptions\n  //           options={[\"Good\", \"Neutral\", \"Bad\"]}\n  //           onLeaveFeedback={(evt) => {\n  //             this.addFeedback(evt);\n  //             this.countTotalFeedback();\n  //             this.countPositiveFeedbackPercentage();\n  //           }}\n  //         />\n  //       </Section>\n\n  //       <Section title={\"Statistics\"}>\n  //         {total === 0 ? (\n  //           <Notification />\n  //         ) : (\n  //           <Statistics\n  //             good={good}\n  //             neutral={neutral}\n  //             bad={bad}\n  //             total={total}\n  //             positivePercentage={positivePercentage}\n  //           />\n  //         )}\n  //       </Section>\n  //     </>\n  //   );\n  // }\n}\n\nexport default App;\n"],"mappings":"AAAA,OAAO,WAAW;AAClB,SAASA,QAAQ,EAACC,SAAS,QAAQ,OAAO;AAC1C,OAAOC,OAAO,MAAM,8BAA8B;AAClD,OAAOC,YAAY,MAAM,wCAAwC;AACjE,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,eAAe,MAAM,8CAA8C;AAE1E,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAChBC,KAAK,GAAG;IACNC,IAAI,EAAE,CAAC;IACPC,OAAO,EAAE,CAAC;IACVC,GAAG,EAAE,CAAC;IACNC,KAAK,EAAE,CAAC;IACRC,kBAAkB,EAAE;EACtB,CAAC;EAED,MAAM,CAACJ,IAAI,EAAEK,OAAO,CAAC,GAAGC,QAAQ,CAAC,CAAC,CAAC;EAEnCC,WAAW,GAAIC,GAAG,IAAK;IACrB,MAAMC,MAAM,GAAGD,GAAG,CAACE,MAAM,CAACC,WAAW,CAACC,WAAW,CAAC,CAAC;IACnD,IAAI,CAACN,QAAQ,CAAEO,SAAS,IAAK;MAC3B,OAAO;QACL,CAACJ,MAAM,GAAGI,SAAS,CAACJ,MAAM,CAAC,GAAG;MAChC,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAEDK,kBAAkB,GAAGA,CAAA,KAAM;IACzB,IAAI,CAACR,QAAQ,CAAEO,SAAS,KAAM;MAC5BV,KAAK,EAAEU,SAAS,CAACV,KAAK,GAAG;IAC3B,CAAC,CAAC,CAAC;EACL,CAAC;EAEDY,+BAA+B,GAAGA,CAAA,KAAM;IACtC,IAAI,CAACT,QAAQ,CAAEO,SAAS,KAAM;MAC5BT,kBAAkB,EAAEY,IAAI,CAACC,KAAK,CAAEJ,SAAS,CAACb,IAAI,GAAGa,SAAS,CAACV,KAAK,GAAI,GAAG;IACzE,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC;AAAAe,EAAA,GA/DKpB,GAAG;AAiET,eAAeA,GAAG;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}